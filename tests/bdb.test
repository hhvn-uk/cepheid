/* vim: set filetype=c : */
#include <stdio.h>
#include "../src/main.h"

/* Generated using xxd -i on the outputted group, plus an extra 0x00 on the end in order to check for excess data */
static unsigned char output[] = {
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x09, 0x6f, 0x6e, 0x65, 0x0a, 0x69,
	0x6e, 0x74, 0x09, 0x32, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x09, 0x33,
	0x2e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0a, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x09, 0x34, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x09,
	0x35, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0a, 0x41, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x09, 0x73, 0x69, 0x78, 0x09, 0x73, 0x65, 0x76,
	0x65, 0x6e, 0x0a, 0x41, 0x69, 0x6e, 0x74, 0x09, 0x38, 0x09, 0x39, 0x09,
	0x31, 0x30, 0x0a, 0x41, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x09, 0x31, 0x31,
	0x2e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x09, 0x31, 0x32, 0x2e, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x09, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x30, 0x0a, 0x00
};

%{
	FILE *fp;
	char *dir = ".";
	char *group = "test";
	unsigned char buf[sizeof(output)] = {0};
	int cnt;

	char *s = "one";
	int i = 2;
	float f = 3;
	Vector v = {4, 5};
	char *S[3] = {"six", "seven", NULL};
	int I[3] = {8, 9, 10};
	float F[4] = {11, 12, 0, 0};

	dbdeclare(dir);

	bdbset(dir, group,
	's', "string", s,
	'i', "int", i,
	'f', "float", f,
	'v', "vector", v,
	'S', "Astring", S, 2,
	'I', "Aint", I, 3,
	'F', "Afloat", F, 3);

	dbwritegroup(dir, group);

	fp = fopen(group, "r");
	fread(buf, sizeof(unsigned char), sizeof(buf), fp);
	fclose(fp);

#define A(x) ck_assert(x);
	for (cnt = 0; i < sizeof(buf); i++)
		A(buf[cnt] == output[cnt]);

#define SET(var) memset(&var, 57, sizeof(var));
	SET(s);
	SET(i);
	SET(f);
	SET(v);
#undef SET
#define SET(var) memset(var, 57, sizeof(var));
	SET(S);
	SET(I);
	SET(F);

	bdbget(dir, group,
	's', "string", &s,
	'i', "int", &i,
	'f', "float", &f,
	'v', "vector", &v,
	'S', "Astring", S, 3,
	'I', "Aint", I, 3,
	'F', "Afloat", F, 4);

	A(streq(s, "one"));
	A(i == 2);
	A(f == 3);
	A(v.x == 4);
	A(v.y == 5);
	A(streq(S[0], "six"));
	A(streq(S[1], "seven"));
	A(S[2] == NULL);
	A(I[0] == 8);
	A(I[1] == 9);
	A(I[2] == 10);

#undef A
#define A(x, y) ck_assert_float_eq_tol(x, y, 0.1)
	A(F[0], 11.0);
	A(F[1], 12.0);
	A(F[2], 0.0);
	A(F[3], 0.0);
}
